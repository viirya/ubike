// Generated by CozyScript 0.1.1
(function() {
  var assert;

  assert = require('assert');

  describe('MQueue', function() {
    describe('#compare_bike()', function() {
      return it('should correctly compare bike status', function() {
        var MQueue, cur, mqueue, prev;
        MQueue = require('../mqueue');
        mqueue = new MQueue.MQueue;
        prev = {
          'tot': 2,
          'sus': 30
        };
        cur = {
          'tot': 3,
          'sus': 32
        };
        assert.equal(mqueue.compare_bike(prev, cur), 1);
        return assert.equal(mqueue.compare_slot(prev, cur), 2);
      });
    });
    describe('#append_bike_status()', function() {
      return it('should add bike status into mqueue', function() {
        var MQueue, cur, mqueue;
        MQueue = require('../mqueue');
        mqueue = new MQueue.MQueue;
        cur = {
          'tot': 3,
          'sus': 32,
          'mday': "08/16 17:42:08"
        };
        mqueue.append_bike_status(cur);
        return assert.deepEqual(mqueue.latest_bike_status(), {
          'tot': 3,
          'mday': "08/16 17:42:08"
        });
      });
    });
    describe('#append_slot_status()', function() {
      return it('should add slot status into mqueue', function() {
        var MQueue, cur, mqueue;
        MQueue = require('../mqueue');
        mqueue = new MQueue.MQueue;
        cur = {
          'tot': 3,
          'sus': 32,
          'mday': "08/16 17:42:08"
        };
        mqueue.append_slot_status(cur);
        return assert.deepEqual(mqueue.latest_slot_status(), {
          'sus': 32,
          'mday': "08/16 17:42:08"
        });
      });
    });
    describe('#update_bike_status()', function() {
      return it('should add bike status into mqueue', function() {
        var MQueue, cur, mqueue, prev;
        MQueue = require('../mqueue');
        mqueue = new MQueue.MQueue;
        prev = {
          'tot': 2,
          'sus': 32,
          'mday': "08/16 17:42:08"
        };
        cur = {
          'tot': 3,
          'sus': 32,
          'mday': "08/16 17:42:09"
        };
        mqueue.update_bike_status(prev);
        assert.deepEqual(mqueue.latest_bike_status(), {
          'tot': 2,
          'mday': "08/16 17:42:08"
        });
        mqueue.update_bike_status(cur);
        return assert.deepEqual(mqueue.latest_bike_status(), {
          'tot': 3,
          'mday': "08/16 17:42:09"
        });
      });
    });
    describe('#update_slot_status()', function() {
      return it('should add slot status into mqueue', function() {
        var MQueue, cur, mqueue, prev;
        MQueue = require('../mqueue');
        mqueue = new MQueue.MQueue;
        prev = {
          'tot': 2,
          'sus': 31,
          'mday': "08/16 17:42:08"
        };
        cur = {
          'tot': 3,
          'sus': 32,
          'mday': "08/16 17:42:09"
        };
        mqueue.update_slot_status(prev);
        assert.deepEqual(mqueue.latest_slot_status(), {
          'sus': 31,
          'mday': "08/16 17:42:08"
        });
        mqueue.update_slot_status(cur);
        return assert.deepEqual(mqueue.latest_slot_status(), {
          'sus': 32,
          'mday': "08/16 17:42:09"
        });
      });
    });
    return describe('#diff_bike_status()', function() {
      return it('should calculate time differences for history bike status', function() {
        var MQueue, cur, mqueue, prev;
        MQueue = require('../mqueue');
        mqueue = new MQueue.MQueue;
        prev = {
          'tot': 2,
          'sus': 32,
          'mday': "08/16 17:42:08"
        };
        cur = {
          'tot': 3,
          'sus': 32,
          'mday': "08/16 17:42:09"
        };
        mqueue.update_bike_status(prev);
        mqueue.update_bike_status(cur);
        return assert.deepEqual(mqueue.diff_bike_status(), [1]);
      });
    });
  });

}).call(this);
