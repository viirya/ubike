// Generated by CozyScript 0.1.1
(function() {
  var InfoWall, MQueue, Ubike,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Ubike = require('./ubike');

  MQueue = require('./mqueue');

  InfoWall = (function() {

    function InfoWall() {
      this.stop = __bind(this.stop, this);
      this.start = __bind(this.start, this);
      this.update = __bind(this.update, this);
      this.construct_mqueue = __bind(this.construct_mqueue, this);
      this.get_markers = __bind(this.get_markers, this);
      this.get_mqueues = __bind(this.get_mqueues, this);      this.ubike = new Ubike.Ubike;
      this.mqueues = {};
      this.diffs = {};
      this.valley_time = {};
      this.running = false;
      this.intervalid = -1;
    }

    InfoWall.prototype.get_mqueues = function() {
      return this.mqueues;
    };

    InfoWall.prototype.get_markers = function() {
      return this.ubike.get_markers();
    };

    InfoWall.prototype.construct_mqueue = function(markers, cb) {
      var marker, marker_name, mqueue, _i, _len, _ref;
      for (_i = 0, _len = markers.length; _i < _len; _i++) {
        marker = markers[_i];
        if (this.mqueues[marker.name] == null) {
          mqueue = new MQueue.MQueue;
          this.mqueues[marker.name] = mqueue;
        }
        mqueue = this.mqueues[marker.name];
        mqueue.update_bike_status(marker);
        mqueue.update_slot_status(marker);
      }
      _ref = this.mqueues;
      for (marker_name in _ref) {
        mqueue = _ref[marker_name];
        if (this.diffs[marker_name] == null) {
          this.diffs[marker_name] = {
            'bike': Number.MAX_VALUE,
            'slot': Number.MAX_VALUE
          };
        }
        this.diffs[marker_name]['bike'] = mqueue.mean_of_diff(mqueue.diff_bike_status(), 'bike');
        this.diffs[marker_name]['slot'] = mqueue.mean_of_diff(mqueue.diff_slot_status(), 'slot');
        if (this.valley_time[marker_name] == null) {
          this.valley_time[marker_name] = {
            'bike': 0,
            'slot': 0
          };
        }
        this.valley_time[marker_name]['bike'] = mqueue.get_bike_valley_time();
        this.valley_time[marker_name]['slot'] = mqueue.get_slot_valley_time();
      }
      if (cb != null) {
        return cb(this.mqueues, this.diffs, this.valley_time);
      }
    };

    InfoWall.prototype.update = function(cb) {
      var _this = this;
      return this.ubike.request(function() {
        return _this.construct_mqueue(_this.ubike.get_markers(), cb);
      });
    };

    InfoWall.prototype.start = function(cb) {
      var _this = this;
      if (!this.running) {
        this.intervalid = setInterval(function() {
          return _this.update(function(mqueues, diffs, valley_time) {
            return cb(mqueues, diffs, valley_time);
          });
        }, 60000);
        return this.running = true;
      }
    };

    InfoWall.prototype.stop = function() {
      if (this.running) {
        clearInterval(this.intervalid);
        this.intervalid = -1;
        return this.running = false;
      }
    };

    return InfoWall;

  })();

  exports.InfoWall = InfoWall;

}).call(this);
