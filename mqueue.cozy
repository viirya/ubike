

class MQueue

    constructor: () ->
        @bikes = []
        @slots = []

    # greater than 0 means bikes are returned; equal 0 means no difference;
    # less than 0 means bikes are rented.

    compare_bike: (prev_station_status, cur_station_status) =>
        return cur_station_status.tot - prev_station_status.tot

    # greater than 0 means there are slots being empty; equal 0 means no difference;
    # less than 0 means there are slots filled.

    compare_slot: (prev_station_status, cur_station_status) =>
        return cur_station_status.sus - prev_station_status.sus

    append_bike_status: (cur_station_status) =>
        @bikes.push({'tot': cur_station_status.tot, 'mday': cur_station_status.mday})
 
    append_slot_status: (cur_station_status) =>
        @slots.push({'sus': cur_station_status.sus, 'mday': cur_station_status.mday})

    # check if bike is increased. if yes, add it into queue 
    update_bike_status: (cur_station_status) =>
        if @bikes.length >= 1
            if @compare_bike(@latest_bike_status!, cur_station_status) > 0
                @append_bike_status(cur_station_status)
        else
            @append_bike_status(cur_station_status)

    # check if slot is increased. if yes, add it into queue 
    update_slot_status: (cur_station_status) =>
        if @slots.length >= 1
            if @compare_slot(@latest_slot_status!, cur_station_status) > 0
                @append_slot_status(cur_station_status)
        else
            @append_slot_status(cur_station_status)
 
    latest_bike_status: () =>
        if @bikes.length >= 1
            return @bikes[@bikes.length - 1]    
        else
            return []

    latest_slot_status: () =>
        if @slots.length >= 1
            return @slots[@slots.length - 1]
        else
            return @slots
    
    diff_bike_status: () =>
        diff = []
        if @bikes.length >= 1
            prev_bike = null
            for bike in @bikes
                if prev_bike?
                    prev_time = Date.parse(prev_bike.mday)
                    cur_time = Date.parse(bike.mday)
                    diff.push((cur_time - prev_time) / 1000)
            
                prev_bike = bike    

        return diff

    diff_slot_status: () =>
        diff = []
        if @slots.length >= 1
            prev_slot = null
            for slot in @slots
                if prev_slot?
                    prev_time = Date.parse(prev_slot.mday)
                    cur_time = Date.parse(slot.mday)
                    diff.push((cur_time - prev_time) / 1000)
            
                prev_slot = slot    

        return diff

    mean_of_diff: (diff) =>
        mean = Number.MAX_VALUE

        if diff.length > 0
            mean = 0

            (val) <- diff.forEach!
                mean += val

            mean /= diff.length

        return mean



exports.MQueue = MQueue

