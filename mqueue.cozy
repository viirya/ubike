

class MQueue

    constructor: () ->
        @bikes = []
        @slots = []
        @history_bike_mean = 0
        @history_slot_mean = 0
 
    get_bikes: () =>
        return @bikes

    get_slots: () =>
        return @slots

    # greater than 0 means bikes are returned; equal 0 means no difference;
    # less than 0 means bikes are rented.

    compare_bike: (prev_station_status, cur_station_status) =>
        return cur_station_status.tot - prev_station_status.tot

    # greater than 0 means there are slots being empty; equal 0 means no difference;
    # less than 0 means there are slots filled.

    compare_slot: (prev_station_status, cur_station_status) =>
        return cur_station_status.sus - prev_station_status.sus

    append_bike_status: (cur_station_status, fake = false) =>
        if fake
            if @bikes[@bikes.length - 1].fake?
                if @slots[@slots.length - 1]['sus'] > 0 # there are slots for bikes
                    @bikes[@bikes.length - 1]['mday'] = cur_station_status.mday 
                    @bikes[@bikes.length - 1]['tot'] = cur_station_status.tot
                else
                    if @bikes[@bikes.length - 1].valley?
                        @bikes[@bikes.length - 1]['mday'] = cur_station_status.mday 
                        @bikes[@bikes.length - 1]['tot'] = cur_station_status.tot
                    else
                        @bikes.push({'valley': true, 'fake': true, 'tot': cur_station_status.tot, 'mday': cur_station_status.mday})
            else 
                @bikes.push({'fake': true, 'tot': cur_station_status.tot, 'mday': cur_station_status.mday})
        else
            @bikes.push({'tot': cur_station_status.tot, 'mday': cur_station_status.mday})
 
    append_slot_status: (cur_station_status, fake = false) =>
        if fake
            if @slots[@slots.length - 1].fake?
                if @bikes[@bikes.length - 1]['tot'] > 0 # there are bikes to rent for
                    @slots[@slots.length - 1]['mday'] = cur_station_status.mday 
                    @slots[@slots.length - 1]['sus'] = cur_station_status.sus
                else
                    if @slots[@slots.length - 1].valley?
                        @slots[@slots.length - 1]['mday'] = cur_station_status.mday 
                        @slots[@slots.length - 1]['sus'] = cur_station_status.sus
                    else
                        @slots.push({'valley': true, 'fake': true, 'sus': cur_station_status.sus, 'mday': cur_station_status.mday})
            else
                @slots.push({'fake': true, 'sus': cur_station_status.sus, 'mday': cur_station_status.mday})
        else
            @slots.push({'sus': cur_station_status.sus, 'mday': cur_station_status.mday})

    # check if bike is increased. if yes, add it into queue 
    update_bike_status: (cur_station_status) =>
        if @bikes.length >= 1
            if @compare_bike(@latest_bike_status!, cur_station_status) > 0
                @append_bike_status(cur_station_status)
            else
                @append_bike_status(cur_station_status, true)
        else
            @append_bike_status(cur_station_status)

    # check if slot is increased. if yes, add it into queue 
    update_slot_status: (cur_station_status) =>
        if @slots.length >= 1
            if @compare_slot(@latest_slot_status!, cur_station_status) > 0
                @append_slot_status(cur_station_status)
            else
                @append_slot_status(cur_station_status, true)
        else
            @append_slot_status(cur_station_status)

    latest_bike_status: () =>
        if @bikes.length >= 1
                for idx in [@bikes.length - 1..0]
                    bike = @bikes[idx]
                    unless bike.fake?
                        return bike
        else
            return []

    latest_slot_status: () =>
        if @slots.length >= 1
                for idx in [@slots.length - 1..0]
                    slot = @slots[idx]
                    unless slot.fake?
                        return slot
        else
            return @slots
    
    diff_bike_status: () =>
        diff = []
        if @bikes.length >= 1
            prev_bike = null
            for bike in @bikes
                if prev_bike?
                    unless prev_bike.fake? && bike.fake?
                        prev_time = Date.parse(prev_bike.mday)
                        cur_time = Date.parse(bike.mday)
                        diff.push((cur_time - prev_time) / 1000)

                prev_bike = bike    

        if @bikes.length > 1000
            @compress_bike_status!

        return diff

    diff_slot_status: () =>
        diff = []
        if @slots.length >= 1
            prev_slot = null
            for slot in @slots
                if prev_slot?
                    unless prev_slot.fake? && slot.fake?
                        prev_time = Date.parse(prev_slot.mday)
                        cur_time = Date.parse(slot.mday)
                        diff.push((cur_time - prev_time) / 1000)

                prev_slot = slot

        if @slots.length > 1000
            @compress_slot_status!    

        return diff

    compress_bike_status: () =>
        history_bike_mean = @mean_of_diff(@diff_bike_status!, 'bike')

        if @bikes.length >= 1
            new_bikes = []
            
            for idx in [@bikes.length - 1..0]
                bike = @bikes[idx]

                if bike.fake?
                    new_bikes.unshift(bike)
                else
                    if new_bikes.length > 0 # already fake bike records there
                        bike['mday'] = @bikes[idx + 1]['mday']
                    new_bikes.unshift(bike)
                    break 

            @bikes = new_bikes
             
    compress_slot_status: () =>
        history_slot_mean = @mean_of_diff(@diff_slot_status!, 'slot')

        if @slots.length >= 1
            new_slots = []
            
            for idx in [@slots.length - 1..0]
                slot = @slots[idx]

                if slot.fake?
                    new_slots.unshift(slot)
                else
                    if new_slots.length > 0 # already fake slot records there
                        slot['mday'] = @slots[idx + 1]['mday']
                    new_slots.unshift(slot)
                    break 

            @slots = new_slots
 
    get_bike_valley_time: () =>
        time = 0
        if @bikes.length >= 1
            prev_bike = null
            for bike in @bikes
                if prev_bike?
                    if prev_bike.fake? && bike.valley?
                        prev_time = Date.parse(prev_bike.mday)
                        cur_time = Date.parse(bike.mday)
                        time = (cur_time - prev_time) / 1000

                prev_bike = bike    

        return time
 
    get_slot_valley_time: () =>
        time = 0
        if @slots.length >= 1
            prev_slot = null
            for slot in @slots
                if prev_slot?
                    if prev_slot.fake? && slot.valley?
                        prev_time = Date.parse(prev_slot.mday)
                        cur_time = Date.parse(slot.mday)
                        time = (cur_time - prev_time) / 1000

                prev_slot = slot    

        return time
 
    mean_of_diff: (diff, type) =>
        mean = Number.MAX_VALUE

        if diff.length > 0
            mean = 0

            (val) <- diff.forEach!
                mean += val

            mean /= diff.length

        if type is 'bike'
            return mean + @history_bike_mean
        else
            return mean + @history_slot_mean


exports.MQueue = MQueue

