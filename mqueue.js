// Generated by CozyScript 0.1.1
(function() {
  var MQueue,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MQueue = (function() {

    function MQueue() {
      this.diff_bike_status = __bind(this.diff_bike_status, this);
      this.latest_slot_status = __bind(this.latest_slot_status, this);
      this.latest_bike_status = __bind(this.latest_bike_status, this);
      this.update_slot_status = __bind(this.update_slot_status, this);
      this.update_bike_status = __bind(this.update_bike_status, this);
      this.append_slot_status = __bind(this.append_slot_status, this);
      this.append_bike_status = __bind(this.append_bike_status, this);
      this.compare_slot = __bind(this.compare_slot, this);
      this.compare_bike = __bind(this.compare_bike, this);      this.bikes = [];
      this.slots = [];
    }

    MQueue.prototype.compare_bike = function(prev_station_status, cur_station_status) {
      return cur_station_status.tot - prev_station_status.tot;
    };

    MQueue.prototype.compare_slot = function(prev_station_status, cur_station_status) {
      return cur_station_status.sus - prev_station_status.sus;
    };

    MQueue.prototype.append_bike_status = function(cur_station_status) {
      return this.bikes.push({
        'tot': cur_station_status.tot,
        'mday': cur_station_status.mday
      });
    };

    MQueue.prototype.append_slot_status = function(cur_station_status) {
      return this.slots.push({
        'sus': cur_station_status.sus,
        'mday': cur_station_status.mday
      });
    };

    MQueue.prototype.update_bike_status = function(cur_station_status) {
      if (this.bikes.length >= 1) {
        if (this.compare_bike(this.latest_bike_status(), cur_station_status) > 0) {
          return this.append_bike_status(cur_station_status);
        }
      } else {
        return this.append_bike_status(cur_station_status);
      }
    };

    MQueue.prototype.update_slot_status = function(cur_station_status) {
      if (this.slots.length >= 1) {
        if (this.compare_slot(this.latest_slot_status(), cur_station_status) > 0) {
          return this.append_slot_status(cur_station_status);
        }
      } else {
        return this.append_slot_status(cur_station_status);
      }
    };

    MQueue.prototype.latest_bike_status = function() {
      if (this.bikes.length >= 1) {
        return this.bikes[this.bikes.length - 1];
      } else {
        return [];
      }
    };

    MQueue.prototype.latest_slot_status = function() {
      if (this.slots.length >= 1) {
        return this.slots[this.slots.length - 1];
      } else {
        return this.slots;
      }
    };

    MQueue.prototype.diff_bike_status = function() {
      var bike, cur_time, diff, prev_bike, prev_time, _i, _len, _ref;
      diff = [];
      if (this.bikes.length >= 1) {
        prev_bike = null;
        _ref = this.bikes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          bike = _ref[_i];
          if (prev_bike != null) {
            prev_time = Date.parse(prev_bike.mday);
            cur_time = Date.parse(bike.mday);
            diff.push((cur_time - prev_time) / 1000);
          }
          prev_bike = bike;
        }
      }
      return diff;
    };

    return MQueue;

  })();

  exports.MQueue = MQueue;

}).call(this);
