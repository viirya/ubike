
app = angular.module('ubike-web', ['ngRoute', 'ngResource', 'ngAnimate'])

($scope, $resource) <- app.controller('UbikeCtrl', _)

    $scope.stations = []
    $scope.markers = {}
    $scope.valley_time = {}
    $scope.current_station_name = ""
    $scope.predicate = "bike"
    $scope.station_name = ""

    (v) <- $scope.$watch('station_name', _)
        if window.update_vis?
            if v isnt ''
                markers = []
                for marker in window.markers
                    if marker.name.indexOf(v) isnt -1
                        markers.push(marker)
            
                if markers.length > 0
                    window.update_vis(markers)
                else
                    window.update_vis(window.markers)
            else
                window.update_vis(window.markers)


    window.update = (new_markers, new_diffs, new_valley_time) ->
        #console.log('update')
        $scope.stations = []
        for station_name, station of new_diffs
            station['name'] = station_name
            $scope.stations.push(station)

        for marker in new_markers
            $scope.markers[marker.name] = marker
        #console.log($scope.markers)

        $scope.valley_time = new_valley_time

        $scope.$apply!

    $scope.change = () ->
        console.log('scope change')

    $scope.filter_max = (station) ->
        if $scope.predicate is "bike"
            return station.bike isnt Number.MAX_VALUE
        else
            return station.slot isnt Number.MAX_VALUE

    $scope.click_station = (station) ->
        marker = $scope.markers[station]

        lat = marker['lat']
        lng = marker['lng']
        #window.map.put_marker(lat, lng)
        $scope.current_station_name = station

        window.map.set_center(lat, lng)
        #window.map.show_info(station)
 
    $scope.click_querytype = (query_type) ->
        $scope.predicate = query_type
        window.predicate = query_type

        window.update_vis(window.markers)
 
    $scope.click_viewtype = (view_type) ->

        switch view_type
            when 'table'
                $('#table').show!
                $('#figure').hide!
 
            when 'figure'
                $('#table').hide!
                $('#figure').show!

class UbikeMap

    constructor: (map_element_id) ->
        latlng = new google.maps.LatLng(-25.363882,131.044922)
        mapOptions =
            zoom: 17,
            center: latlng,
            mapTypeId: google.maps.MapTypeId.ROADMAP

        @map = new google.maps.Map(document.getElementById(map_element_id), mapOptions)
        @markers = {}
        @infowindow = new google.maps.InfoWindow!

    setzoom: (level) =>
        @map.setZoom(level)

    redraw: () =>
        console.log('redraw')
        google.maps.event.trigger(@map, 'resize')

    get_markers: () =>
        return @markers

    set_center: (lat, lng) =>
        newlatlng = new google.maps.LatLng(lat, lng)
        @map.setCenter(newlatlng)

    show_info: (name, html) =>
        if @markers[name]?
            marker = @markers[name]

            html = "<div class='infoboxonmap'><span class='info'>#{name}</span></div>"

            () <~ google.maps.event.addListener(marker, 'mouseover', _)
                @infowindow.setContent(html)
                @infowindow.open(@map, marker)
 
    put_marker: (lat, lng, name) =>
        newlatlng = new google.maps.LatLng(lat, lng)
        marker = new google.maps.Marker(
          position: newlatlng,
          map: @map,
          icon:
            url: 'images/bike.png',
            scaledSize: new google.maps.Size(50, 50)
        )

        @markers[name] = marker

        modify_info = () ->

            station = window.diffs[name]
            station_marker = null
            for marker_itr in window.markers
                if marker_itr.name is name
                    station_marker = marker_itr
 
            $('#mapinfobox > span.station_name_info').text(name)
            $('#mapinfobox > span.station_tot_info').text('車輛：' + station_marker['tot'])
            $('#mapinfobox > span.station_sus_info').text('車位：' + station_marker['sus'])
 
    
            if station.bike != Number.MAX_VALUE && station.bike > 0 && station_marker? && station_marker['sus'] != '0'
                $('#mapinfobox > span.station_tot_time_info').text("平均還車間隔：#{(station.bike / 60).toFixed(2)} 分鐘")
            else if station.bike == 0 && station_marker? && station_marker['sus'] != '0'
                $('#mapinfobox > span.station_tot_time_info').text("平均還車間隔：無資料")
            
            else if station_marker? && station_marker['sus'] == '0'
                $('#mapinfobox > span.station_tot_time_info').text("已無車位")


            if station.slot != Number.MAX_VALUE && station.slot > 0 && station_marker? && station_marker['tot'] != '0'
                $('#mapinfobox > span.station_sus_time_info').text("平均借車間隔：#{(station.slot / 60).toFixed(2)} 分鐘")
            else if station.slot == 0 && station_marker? && station_marker['tot'] != '0'
                $('#mapinfobox > span.station_sus_time_info').text("平均借車間隔：無資料")
            else if station_marker? && station_marker['tot'] == '0'
                $('#mapinfobox > span.station_sus_time_info').text("已無車輛")

        () <~ google.maps.event.addListener(marker, 'click', _)
            modify_info!
            @infowindow.setContent($('.infobox').html!)
            @infowindow.open(@map, marker)

        () <~ google.maps.event.addListener(marker, 'mouseover', _)
            modify_info!
            @infowindow.setContent($('.infobox').html!)
            @infowindow.open(@map, marker)
 
 
() <- $(document).ready!


    window.current_marker = null
    window.predicate = 'bike'
    window.current_station_name = ''

    socket = io.connect('http://cml10.csie.ntu.edu.tw:8088')
    (data) <- socket.on('ubike', _)
        window.markers = data[0]
        window.diffs = data[1]
        window.valley_time = data[2]
        window.update(window.markers, window.diffs, window.valley_time)

        if window.markers? and Object.keys(window.map.get_markers!).length != window.markers.length
            (marker) <- window.markers.forEach!
                window.map.put_marker(marker.lat, marker.lng, marker.name)

        if window.markers?
            window.update_vis(window.markers)


    window.map = new UbikeMap('map-canvas')

    $(".fancybox").fancybox!

    init_vis = () ->

        svg = d3.select("#d3-canvas").append("svg")
            .attr("width", 1200)
            .attr("height", 4000)

        window.container = container = svg.append("g")
            .attr("transform", "translate(" + 0 + "," + 0 + ")")

        # title = container.append("text")
        #    .attr("color", "red")
        #    .attr("font-size", "30px")
        #    .attr("transform", "translate(" + 10 + "," + -20 + ")")
        #    .text("Ubike")

        $('#figure').hide!


        window.inspector = d3.select('body')
            .append('div')
            .attr('class',  'inspector')
            .style('opacity', 0)

        window.station_label = window.inspector.append('p')
        window.bike_label = window.inspector.append('p')
        window.slot_label = window.inspector.append('p')


    window.update_vis = (input_markers) ->    

        # de-duplicate
        count = {}
        markers = []
        for marker in input_markers
            unless count[marker.name]?
                count[marker.name] = 1
                markers.push(marker)

        # remove unselected items
        groups = window.container.selectAll("g")
            .data(d3.range(0, markers.length, 1), (d) ->
                if markers[d]?
                    markers[d]['name']
                else
                    null
            )
            .exit!
            .remove!

        # create new ones
        groups = window.container.selectAll("rect")
            .data(d3.range(0, markers.length, 1), (d) -> markers[d]['name'])
            .enter!
            .append('g')

        groups.append("rect")
            .attr("width", (d) -> 
                n = markers[d]['name']
                if window.predicate is 'bike'
                    if window.diffs[n]? and window.diffs[n].bike isnt 0 and window.diffs[n].bike isnt Number.MAX_VALUE
                        window.diffs[n].bike / 60 * 2   
                    else
                        0
                else
                    if window.diffs[n]? and window.diffs[n].slot isnt 0 and window.diffs[n].slot isnt Number.MAX_VALUE
                        window.diffs[n].slot / 60 * 2   
                    else
                        0
            )
            .attr("height", '30px')
            .attr('x', 10)
            .attr('y', (d) -> 35 * d)

        #window.container.selectAll('g')
        groups.append('text')
            .text((d) -> markers[d]['name'])
            .style('font-size', '20px')
            .attr('x', 20)
            .attr('y', (d) -> 35 * d + 26)
 
        # update
        window.container.selectAll("rect")
            .data(d3.range(0, markers.length, 1), (d) -> markers[d]['name'])
            .attr("width", (d) ->
                n = markers[d]['name']
                if window.predicate is 'bike'
                    if window.diffs[n]? and window.diffs[n].bike isnt 0 and window.diffs[n].bike isnt Number.MAX_VALUE
                        window.diffs[n].bike / 60 * 2  
                    else
                        0
                else
                    if window.diffs[n]? and window.diffs[n].slot isnt 0 and window.diffs[n].slot isnt Number.MAX_VALUE
                        window.diffs[n].slot / 60 * 2  
                    else
                        0
            )
            .attr("height", '30px')
            .attr('x', 10)
            .attr('y', (d) -> 35 * d)
 
        window.container.selectAll('text')
            .data(d3.range(0, markers.length, 1), (d) -> markers[d]['name'])
            .text((d) ->
                n = markers[d]['name']

                if window.predicate is 'bike'
                    bike = markers[d]['name'] + ' 平均還車間隔：'
                    if window.diffs[n]? and window.diffs[n].bike isnt 0 and window.diffs[n].bike isnt Number.MAX_VALUE
                        return bike + (window.diffs[n].bike / 60).toFixed(2) + ' 分鐘'
                    else
                        return bike + '無資料'
                else
                    slot = markers[d]['name'] + ' 平均借車間隔：'
                    if window.diffs[n]? and window.diffs[n].slot isnt 0 and window.diffs[n].slot isnt Number.MAX_VALUE
                        return slot + (window.diffs[n].slot / 60).toFixed(2) + ' 分鐘'
                    else
                        return slot + '無資料'
            )
            .on('mouseover', (d) ->
                marker = markers[d]

                window.inspector.transition!
                    .duration(200)
                    .style('opacity', 0.9)

                window.station_label.text('站名：' + marker.name)
                window.bike_label.text('車輛：' + marker.tot)
                window.slot_label.text('車位：' + marker.sus)
                window.inspector.style('left', (d3.event.pageX) + "px")
                window.inspector.style('top', (d3.event.pageY - 30) + "px")

            )
            .on('mouseout', (d) ->
                window.inspector.transition!
                    .duration(500)
                    .style('opacity', 0.0)
            )
            .on('click', (d) ->
                marker = markers[d]
 
                lat = marker['lat']
                lng = marker['lng']       
                window.map.set_center(lat, lng)

                $.fancybox.open([
                    href : '#map-canvas',                
                    title : 'Ubike Map'
                ], {padding: 0})
            )
    
        
    init_vis!




